package com.friendoye.recyclerxray

import androidx.recyclerview.widget.RecyclerView

/**
 * Helper extension method for extraction of Android Studio compatible link to file,
 * that could be, for example, logged via Logcat. Android Studio parses
 * given link in Logcat and makes it clickable, so user can navigate directly to
 * [RecyclerView.ViewHolder], for which this method was invoked.
 *
 * Returns `null`, if couldn't retrieve loggable link.
 *
 * Note: for correct work of this method all Kotlin non-nullability checks
 * (i.e. [Intrinsics.checkParameterIsNotNull()]) should be removed from Java
 * generated bytecode.
 *
 * To be able to do so, you should specify special flag for Kotlin compiler
 * in your `build.gradle`, like so:
 *
 *     kotlinOptions {
 *         ...
 *         freeCompilerArgs += ["-Xno-param-assertions"]
 *     }
 */
fun Class<out RecyclerView.ViewHolder>.getLoggableLinkToFileWithClass(): String? {
    try {
        val constructor = constructors.first()
        constructor.isAccessible = true
        val argsTypes = constructor.parameterTypes
        val array = Array(argsTypes.size) { index -> argsTypes[index].createInstance() }
        constructor.newInstance(*array)
    } catch (e: Exception) {
        var linkToClass: String?
        linkToClass = canonicalName?.run {
            e.cause?.stackTrace?.find { it.toString().contains(this) }?.run {
                "$fileName:$lineNumber"
            }
        }
        if (linkToClass == null) {
            linkToClass = e.cause?.stackTrace?.get(0)?.run {
                "$fileName:$lineNumber"
            }
        }
        if (linkToClass == null || linkToClass.startsWith("RecyclerView.java")) {
            linkToClass = e.cause?.stackTrace?.get(1)?.run {
                "$fileName:$lineNumber"
            }
        }
        return "$simpleName($linkToClass)"
    }
    return null
}

@Suppress("UNCHECKED_CAST", "IMPLICIT_CAST_TO_ANY")
internal fun <T> Class<T>.createInstance(): T? {
    val value = when (this) {
        Byte::class.java -> 0.toByte()
        Short::class.java -> 0.toShort()
        Int::class.java -> 0
        Long::class.java -> 0L
        Float::class.java -> 0f
        Double::class.java -> 0.0
        Char::class.java -> ' '
        String::class.java -> ""
        Boolean::class.java -> false
        else -> null
    }
    return value as T?
}
